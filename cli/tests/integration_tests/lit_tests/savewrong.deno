# SPDX-FileCopyrightText: Â© 2021-2022 ChiselStrike <info@chiselstrike.com>

# RUN: sh -e @file

cp examples/person.ts "$TEMPDIR/models"

cd "$TEMPDIR"

cat << EOF > "$TEMPDIR/routes/store.ts"
import { Person } from "../models/person.ts";

export default async function chisel(req: Request) {
    let person = new Person();
    person.invalidField = "foo";
    await person.save();
    return new Response("Ok");
}
EOF

$CHISEL apply 2>&1 | $RMCOLOR|| true

# CHECK:  Error: Could not compile routes
# CHECK:  Caused by:
# CHECK:      Compilation failed:
# CHECK:      routes/store.ts:5:12 - error TS2339: Property 'invalidField' does not exist on type 'Person'.

cat << EOF > "$TEMPDIR/routes/store.ts"
import { Person } from "../models/person.ts";

export default async function chisel(req: Request) {
    let person = new Person();
    person.first_name = "foo";
    try {
        await person.save();
    } catch (e) {
        return new Response("" + e, { status: 500 });
    }
    return new Response("Ok984");
}
EOF

$CHISEL apply
# CHECK: Code was applied

$CURL $CHISELD_HOST/dev/store

# CHECK: Error: Mutating the backend is not allowed during GET

$CURL -X POST $CHISELD_HOST/dev/store

# CHECK: Ok984

## Can't save auth types from user routes:
cat << EOF > "$TEMPDIR/routes/store.ts"
import { AuthUser, ChiselRequest } from '@chiselstrike/api';
import { MiddlewareNext } from 'chisel:///routing.ts'; // TODO : replace with public API

export default AuthUser.crud()
    .middleware(showError);

async function showError(req: ChiselRequest, next: MiddlewareNext): Promise<Response> {
    try {
        return await next(req);
    } catch (e) {
        return new Response("" + e, { status: 500 });
    }
}
EOF
$CHISEL apply
# CHECK: Code was applied

$CURL -d '{"name":"Foo", "email":"foo@t.co"}' $CHISELD_HOST/dev/store
# CHECK: Error: Cannot save into auth type AuthUser
$CURL -X PUT -d '{"name":"Foo", "email":"foo@t.co"}' $CHISELD_HOST/dev/store/abcd-1234-efgh-5678
# CHECK: Error: Cannot save into auth type AuthUser

## Can't modify auth types via nested fields:
cat << EOF > "$TEMPDIR/models/post.ts"
import { ChiselEntity, AuthUser } from '@chiselstrike/api'
export class Post extends ChiselEntity {
    text: string = "Lorem Ipsum";
    author: AuthUser;
}
EOF

cat << EOF > "$TEMPDIR/routes/store.ts"
import { ChiselRequest } from '@chiselstrike/api';
import { MiddlewareNext } from 'chisel:///routing.ts'; // TODO : replace with public API

import { Post } from '../models/post.ts';
export default Post.crud()
    .middleware(showError);

async function showError(req: ChiselRequest, next: MiddlewareNext): Promise<Response> {
    try {
        return await next(req);
    } catch (e) {
        return new Response("" + e, { status: 500 });
    }
}
EOF

$CHISEL apply
# CHECK: Code was applied

$CURL -d '{"author":{"email": "foo@t.co"}}' $CHISELD_HOST/dev/store
# CHECK: Error: Cannot save into nested type AuthUser
$CURL -d '{"author":{"id":"ID123", "email": "foo@t.co"}}' $CHISELD_HOST/dev/store
# CHECK: HTTP/1.1 200 OK
# CHECK: "email": "foo@t.co"

echo '{ "CHISELD_AUTH_SECRET" : "0" }' > ${TEMPDIR}/.env
$CHISEL restart
# CHECK: Server restarted successfully.
echo There are currently `$CURL -H ChiselAuth:0 $CHISELD_HOST/__chiselstrike/auth/users | grep foo@t.co | wc -l` users.
# CHECK: There are currently 0 users.
