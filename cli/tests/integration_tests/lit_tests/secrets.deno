# SPDX-FileCopyrightText: Â© 2021 ChiselStrike <info@chiselstrike.com>

# RUN: sh -e @file

cat << EOF > "$TEMPDIR/routes/secret.ts"
import { ChiselRequest, getSecret } from "@chiselstrike/api"

export default async function chisel(req: ChiselRequest) {
    let marker = req.query.get("m"); // match requests to responses (damned lit)
    let secret = getSecret("secret");
    return new Response(marker + ": " + JSON.stringify(secret));
}
EOF

cd "$TEMPDIR"
$CHISEL apply

echo '{ "secret" : null }' > ${TEMPDIR}/.env
$CHISEL restart
$CURL -o - $CHISELD_HOST/dev/secret?m=01
# CHECK: 01: null

echo '{ "secret" : "string" }' > ${TEMPDIR}/.env
$CHISEL restart
$CURL -o - $CHISELD_HOST/dev/secret?m=02
# CHECK: 02: "string"

echo '{ "secret" : { "key" : "value" }}' > ${TEMPDIR}/.env
$CHISEL restart
$CURL -o - $CHISELD_HOST/dev/secret?m=03
# CHECK: 03: {"key":"value"}

chmod 200 ${TEMPDIR}/.env
echo '{ malformed }' > ${TEMPDIR}/.env
# We need to sleep since a restart would clear the secret. We need to
# sleep a lot since printing a backtrace to the log takes a long time.
sleep 5
$CURL -o - $CHISELD_HOST/dev/secret?m=04
# CHECK: 04: {"key":"value"}

chmod 600 ${TEMPDIR}/.env
sleep 2.5 # Sleep to test the periodic reread
$CURL -o - $CHISELD_HOST/dev/secret?m=05
# CHECK: 05: {"key":"value"}

echo '{ "othersecret" : "value" }' > ${TEMPDIR}/.env
$CHISEL restart
$CURL -o - $CHISELD_HOST/dev/secret?m=06
# CHECK: 06: undefined
#
echo '{ "secret" : true }' > ${TEMPDIR}/.env
$CHISEL restart
$CURL -o - $CHISELD_HOST/dev/secret?m=07
# CHECK: 07: true

echo '{ "secret" : false }' > ${TEMPDIR}/.env
$CHISEL restart
$CURL -o - $CHISELD_HOST/dev/secret?m=08
# CHECK: 08: false
