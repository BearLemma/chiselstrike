# SPDX-FileCopyrightText: Â© 2022 ChiselStrike <info@chiselstrike.com>

# RUN: sh -e @file

cat << EOF > "$TEMPDIR/models/types.ts"
import { ChiselEntity } from "@chiselstrike/api";

export class Data extends ChiselEntity {
    num: number = 0;
}
EOF

cat << EOF > "$TEMPDIR/endpoints/stream.ts"
import { Data } from "../models/types.ts";

export default async function chisel(req: Request) {
    const promises = [];
    for (let i = 0; i < 10; i += 1) {
        promises.push(Data.build({ 'num': i}).save());
    }
    await Promise.all(promises);

    let cursor = Data.cursor();
    let asyncIter = cursor[Symbol.asyncIterator]();
    let stream = new ReadableStream({
        async pull(controller) {
            let item = await asyncIter.next();
            throw new Error("Error in stream");
        }
    })

    return new Response(stream);
}
EOF

cat << EOF > "$TEMPDIR/endpoints/add.ts"
import { Data } from "../models/types.ts";

export default async function chisel(req: Request) {
    let total = 0;
    for await (const v of Data.cursor()) {
        total += v.num;
    }
    return new Response("Total is: " + total + ".\n");
}
EOF

cd "$TEMPDIR"

$CHISEL apply

$CURL --data '' $CHISELD_HOST/dev/stream 2>&1 || true

# If the first call to pull completes quickly enough hyper will send
# an empty response. Otherwise we get the headers while hyper waits
# for pull. Handle both error messages:
# CHECK: [[(Empty reply from server)|(transfer closed with outstanding read data remaining)]]

$CURL $CHISELD_HOST/dev/add

# CHECK: Total is: 0.
