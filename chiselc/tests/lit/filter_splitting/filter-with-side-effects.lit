// Test splitting a filter with side-effects.
// RUN: @chiselc @file -e Person

Person.cursor().filter(person => person.age > 40 && fetch("foobar"))

// CHECK: Person.cursor().__filter((person)=>person.age > 40
// CHECK: , {
// CHECK:     exprType: "Binary",
// CHECK:     left: {
// CHECK:         exprType: "Property",
// CHECK:         object: {
// CHECK:             exprType: "Parameter",
// CHECK:             position: 0
// CHECK:         },
// CHECK:         property: "age"
// CHECK:     },
// CHECK:     op: "Gt",
// CHECK:     right: {
// CHECK:         exprType: "Value",
// CHECK:         value: 40
// CHECK:     }
// CHECK: }, (person)=>fetch("foobar")
// CHECK: );

Person.cursor().filter(person => person.name == "Glauber Costa" && person.age > 40 && validate(person));

// CHECK: Person.cursor().__filter((person)=>person.name == "Glauber Costa" && person.age > 40
// CHECK: , {
// CHECK:     exprType: "Binary",
// CHECK:     left: {
// CHECK:         exprType: "Binary",
// CHECK:         left: {
// CHECK:             exprType: "Property",
// CHECK:             object: {
// CHECK:                 exprType: "Parameter",
// CHECK:                 position: 0
// CHECK:             },
// CHECK:             property: "name"
// CHECK:         },
// CHECK:         op: "Eq",
// CHECK:         right: {
// CHECK:             exprType: "Value",
// CHECK:             value: "Glauber Costa"
// CHECK:         }
// CHECK:     },
// CHECK:     op: "And",
// CHECK:     right: {
// CHECK:         exprType: "Binary",
// CHECK:         left: {
// CHECK:             exprType: "Property",
// CHECK:             object: {
// CHECK:                 exprType: "Parameter",
// CHECK:                 position: 0
// CHECK:             },
// CHECK:             property: "age"
// CHECK:         },
// CHECK:         op: "Gt",
// CHECK:         right: {
// CHECK:             exprType: "Value",
// CHECK:             value: 40
// CHECK:         }
// CHECK:     }
// CHECK: }, (person)=>validate(person)
// CHECK: );

const age = 40;
Person.cursor().filter(person => person.age > age && fetch("foobar"))

// CHECK: const age = 40;
// CHECK: Person.cursor().__filter((person)=>person.age > age
// CHECK: , {
// CHECK:     exprType: "Binary",
// CHECK:     left: {
// CHECK:         exprType: "Property",
// CHECK:         object: {
// CHECK:             exprType: "Parameter",
// CHECK:             position: 0
// CHECK:         },
// CHECK:         property: "age"
// CHECK:     },
// CHECK:     op: "Gt",
// CHECK:     right: {
// CHECK:         exprType: "Identifier",
// CHECK:         ident: "age"
// CHECK:     }
// CHECK: }, (person)=>fetch("foobar")
// CHECK: );
